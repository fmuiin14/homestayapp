{"version":3,"sources":["components/homestay.js","components/marker.js","App.js","serviceWorker.js","index.js"],"names":["Homestay","handleClick","_this","props","selectHomestay","homestay","judul","concat","this","nama","harga","style","backgroundImage","fotoUrl","react_default","a","createElement","className","onClick","React","Component","Marker","classes","selected","text","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","selectedHomestay","handleSearch","event","search","target","value","homestays","state","allHomestays","filter","RegExp","exec","_this2","fetch","then","response","json","data","_this3","center","lat","lng","type","placeholder","onChange","map","src_components_homestay","key","id","lib_default","zoom","components_marker","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a822e00b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./homestay.css\";\n\nclass Homestay extends React.Component {\n  handleClick = () =>{\n    this.props.selectHomestay(this.props.homestay);\n  }\n  render() {\n    const judul = `${this.props.homestay.nama} - Rp. ${this.props.homestay.harga} rb`\n    const style = {\n      backgroundImage: `url('${this.props.homestay.fotoUrl}')`\n    };\n\n    return (\n      <div className=\"homestay\" onClick={this.handleClick}>\n        <div className=\"homestay-foto\" style={style}></div>\n        <div className=\"homestay-judul\">{judul}</div>\n      </div>\n    );\n  }\n}\n\nexport default Homestay;\n","import React, { Component } from 'react';\nimport './marker.css';\n\nclass Marker extends Component {\n    render() {\n        let classes = \"marker\";\n        if (this.props.selected) {\n            classes += \" selected\";\n        }\n\n        return (\n            <div className={classes}>{this.props.text} rb</div>\n        );\n    }\n}\n\nexport default Marker;","import React, { Component } from 'react';\nimport './App.css';\nimport Homestay from './components/homestay';\nimport GoogleMapReact from 'google-map-react';\nimport Marker from './components/marker';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      homestays: [],\n      allHomestays: [],\n      selectedHomestay: null,\n      search: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://raw.githubusercontent.com/algosigma/js-reactjs/master/homestays.json\")\n    .then(response => response.json())\n    .then((data) => {\n      this.setState({\n        homestays: data,\n        allHomestays: data\n      });\n    })\n  }\n\n  selectHomestay = (homestay) => {\n    this.setState({\n      selectedHomestay: homestay\n    })\n  }\n\n  handleSearch = (event) => {\n    this.setState({\n      search: event.target.value,\n      homestays: this.state.allHomestays.filter((homestay) => new RegExp(event.target.value, \"i\").exec(homestay.nama))\n    })\n  }\n\n  render() {\n    let center = {\n      lat: -7.795424,\n      lng: 110.371754\n    }\n    if (this.state.selectedHomestay) {\n      center = {\n        lat: this.state.selectedHomestay.lat,\n        lng: this.state.selectedHomestay.lng\n      }\n    }\n\n    return (\n      <div className=\"app\">\n        <div className=\"main\">\n          <div className=\"search\">\n            <input type=\"text\" placeholder=\"Search ..\" value={this.state.search} onChange={this.handleSearch} />\n            </div>\n          <div className=\"homestays\">\n            {this.state.homestays.map((homestay) => {\n              return <Homestay\n                        key={homestay.id}\n                        homestay={homestay} \n                        selectHomestay={this.selectHomestay} />\n            })}\n          </div>\n        </div>\n        <div className=\"peta\">\n          <GoogleMapReact\n            center={center}\n            zoom={15}\n            >\n            {this.state.homestays.map((homestay) => {\n              return <Marker\n                        key={homestay.id}\n                        lat={homestay.lat}\n                        lng={homestay.lng}\n                        text={homestay.harga} \n                        selected={homestay === this.state.selectedHomestay} />\n            })}\n            </GoogleMapReact>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}